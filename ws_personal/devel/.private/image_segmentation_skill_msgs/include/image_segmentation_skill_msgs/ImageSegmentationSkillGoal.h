// Generated by gencpp from file image_segmentation_skill_msgs/ImageSegmentationSkillGoal.msg
// DO NOT EDIT!


#ifndef IMAGE_SEGMENTATION_SKILL_MSGS_MESSAGE_IMAGESEGMENTATIONSKILLGOAL_H
#define IMAGE_SEGMENTATION_SKILL_MSGS_MESSAGE_IMAGESEGMENTATIONSKILLGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_segmentation_skill_msgs
{
template <class ContainerAllocator>
struct ImageSegmentationSkillGoal_
{
  typedef ImageSegmentationSkillGoal_<ContainerAllocator> Type;

  ImageSegmentationSkillGoal_()
    : detection_model()
    , operation_mode(0)  {
    }
  ImageSegmentationSkillGoal_(const ContainerAllocator& _alloc)
    : detection_model(_alloc)
    , operation_mode(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _detection_model_type;
  _detection_model_type detection_model;

   typedef uint32_t _operation_mode_type;
  _operation_mode_type operation_mode;





  typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ImageSegmentationSkillGoal_

typedef ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<std::allocator<void> > ImageSegmentationSkillGoal;

typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal > ImageSegmentationSkillGoalPtr;
typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal const> ImageSegmentationSkillGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator1> & lhs, const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator2> & rhs)
{
  return lhs.detection_model == rhs.detection_model &&
    lhs.operation_mode == rhs.operation_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator1> & lhs, const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace image_segmentation_skill_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69dc3d6e4c7e6e89a60d1b5eb79bf88b";
  }

  static const char* value(const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69dc3d6e4c7e6e89ULL;
  static const uint64_t static_value2 = 0xa60d1b5eb79bf88bULL;
};

template<class ContainerAllocator>
struct DataType< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_segmentation_skill_msgs/ImageSegmentationSkillGoal";
  }

  static const char* value(const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#################\n"
"# Goal definition\n"
"string detection_model\n"
"uint32 operation_mode\n"
;
  }

  static const char* value(const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detection_model);
      stream.next(m.operation_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageSegmentationSkillGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_segmentation_skill_msgs::ImageSegmentationSkillGoal_<ContainerAllocator>& v)
  {
    s << indent << "detection_model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.detection_model);
    s << indent << "operation_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.operation_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_SEGMENTATION_SKILL_MSGS_MESSAGE_IMAGESEGMENTATIONSKILLGOAL_H
