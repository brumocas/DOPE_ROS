// Generated by gencpp from file image_segmentation_skill_msgs/ImageSegmentationSkillAction.msg
// DO NOT EDIT!


#ifndef IMAGE_SEGMENTATION_SKILL_MSGS_MESSAGE_IMAGESEGMENTATIONSKILLACTION_H
#define IMAGE_SEGMENTATION_SKILL_MSGS_MESSAGE_IMAGESEGMENTATIONSKILLACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <image_segmentation_skill_msgs/ImageSegmentationSkillActionGoal.h>
#include <image_segmentation_skill_msgs/ImageSegmentationSkillActionResult.h>
#include <image_segmentation_skill_msgs/ImageSegmentationSkillActionFeedback.h>

namespace image_segmentation_skill_msgs
{
template <class ContainerAllocator>
struct ImageSegmentationSkillAction_
{
  typedef ImageSegmentationSkillAction_<ContainerAllocator> Type;

  ImageSegmentationSkillAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  ImageSegmentationSkillAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::image_segmentation_skill_msgs::ImageSegmentationSkillActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::image_segmentation_skill_msgs::ImageSegmentationSkillActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::image_segmentation_skill_msgs::ImageSegmentationSkillActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> const> ConstPtr;

}; // struct ImageSegmentationSkillAction_

typedef ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<std::allocator<void> > ImageSegmentationSkillAction;

typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction > ImageSegmentationSkillActionPtr;
typedef boost::shared_ptr< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction const> ImageSegmentationSkillActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator1> & lhs, const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator2> & rhs)
{
  return lhs.action_goal == rhs.action_goal &&
    lhs.action_result == rhs.action_result &&
    lhs.action_feedback == rhs.action_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator1> & lhs, const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace image_segmentation_skill_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f72008bff99b5d530ac11cab128e2ad";
  }

  static const char* value(const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f72008bff99b5d5ULL;
  static const uint64_t static_value2 = 0x30ac11cab128e2adULL;
};

template<class ContainerAllocator>
struct DataType< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_segmentation_skill_msgs/ImageSegmentationSkillAction";
  }

  static const char* value(const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"ImageSegmentationSkillActionGoal action_goal\n"
"ImageSegmentationSkillActionResult action_result\n"
"ImageSegmentationSkillActionFeedback action_feedback\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/ImageSegmentationSkillActionGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"ImageSegmentationSkillGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/ImageSegmentationSkillGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#################\n"
"# Goal definition\n"
"string detection_model\n"
"uint32 operation_mode\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/ImageSegmentationSkillActionResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"ImageSegmentationSkillResult result\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalStatus\n"
"GoalID goal_id\n"
"uint8 status\n"
"uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
"uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
"uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
"                            #   and has since completed its execution (Terminal State)\n"
"uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
"uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
"                            #    to some failure (Terminal State)\n"
"uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
"                            #    because the goal was unattainable or invalid (Terminal State)\n"
"uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
"                            #    and has not yet completed execution\n"
"uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
"                            #    but the action server has not yet confirmed that the goal is canceled\n"
"uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
"                            #    and was successfully cancelled (Terminal State)\n"
"uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
"                            #    sent over the wire by an action server\n"
"\n"
"#Allow for the user to associate a string with GoalStatus for debugging\n"
"string text\n"
"\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/ImageSegmentationSkillResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"###################\n"
"# Result definition\n"
"\n"
"#sensor_msgs/PointCloud2 cloud\n"
"int32 percentage\n"
"string skillStatus\n"
"string outcome\n"
"image_segmentation_skill_msgs/MaskDefinition mask_pub\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/MaskDefinition\n"
"int32 instance_nr\n"
"std_msgs/Float32MultiArray scores\n"
"sensor_msgs/Image mask_image\n"
"================================================================================\n"
"MSG: std_msgs/Float32MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float32[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/ImageSegmentationSkillActionFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"ImageSegmentationSkillFeedback feedback\n"
"\n"
"================================================================================\n"
"MSG: image_segmentation_skill_msgs/ImageSegmentationSkillFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"#####################\n"
"# Feedback definition\n"
"int32 percentage\n"
"string skillStatus\n"
;
  }

  static const char* value(const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageSegmentationSkillAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_segmentation_skill_msgs::ImageSegmentationSkillAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::image_segmentation_skill_msgs::ImageSegmentationSkillActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_SEGMENTATION_SKILL_MSGS_MESSAGE_IMAGESEGMENTATIONSKILLACTION_H
