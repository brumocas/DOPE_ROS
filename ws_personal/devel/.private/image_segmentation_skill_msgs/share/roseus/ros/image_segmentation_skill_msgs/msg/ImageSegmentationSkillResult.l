;; Auto-generated. Do not edit!


(when (boundp 'image_segmentation_skill_msgs::ImageSegmentationSkillResult)
  (if (not (find-package "IMAGE_SEGMENTATION_SKILL_MSGS"))
    (make-package "IMAGE_SEGMENTATION_SKILL_MSGS"))
  (shadow 'ImageSegmentationSkillResult (find-package "IMAGE_SEGMENTATION_SKILL_MSGS")))
(unless (find-package "IMAGE_SEGMENTATION_SKILL_MSGS::IMAGESEGMENTATIONSKILLRESULT")
  (make-package "IMAGE_SEGMENTATION_SKILL_MSGS::IMAGESEGMENTATIONSKILLRESULT"))

(in-package "ROS")
;;//! \htmlinclude ImageSegmentationSkillResult.msg.html


(defclass image_segmentation_skill_msgs::ImageSegmentationSkillResult
  :super ros::object
  :slots (_percentage _skillStatus _outcome _mask_pub ))

(defmethod image_segmentation_skill_msgs::ImageSegmentationSkillResult
  (:init
   (&key
    ((:percentage __percentage) 0)
    ((:skillStatus __skillStatus) "")
    ((:outcome __outcome) "")
    ((:mask_pub __mask_pub) (instance image_segmentation_skill_msgs::MaskDefinition :init))
    )
   (send-super :init)
   (setq _percentage (round __percentage))
   (setq _skillStatus (string __skillStatus))
   (setq _outcome (string __outcome))
   (setq _mask_pub __mask_pub)
   self)
  (:percentage
   (&optional __percentage)
   (if __percentage (setq _percentage __percentage)) _percentage)
  (:skillStatus
   (&optional __skillStatus)
   (if __skillStatus (setq _skillStatus __skillStatus)) _skillStatus)
  (:outcome
   (&optional __outcome)
   (if __outcome (setq _outcome __outcome)) _outcome)
  (:mask_pub
   (&rest __mask_pub)
   (if (keywordp (car __mask_pub))
       (send* _mask_pub __mask_pub)
     (progn
       (if __mask_pub (setq _mask_pub (car __mask_pub)))
       _mask_pub)))
  (:serialization-length
   ()
   (+
    ;; int32 _percentage
    4
    ;; string _skillStatus
    4 (length _skillStatus)
    ;; string _outcome
    4 (length _outcome)
    ;; image_segmentation_skill_msgs/MaskDefinition _mask_pub
    (send _mask_pub :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _percentage
       (write-long _percentage s)
     ;; string _skillStatus
       (write-long (length _skillStatus) s) (princ _skillStatus s)
     ;; string _outcome
       (write-long (length _outcome) s) (princ _outcome s)
     ;; image_segmentation_skill_msgs/MaskDefinition _mask_pub
       (send _mask_pub :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _percentage
     (setq _percentage (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; string _skillStatus
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _skillStatus (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _outcome
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _outcome (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; image_segmentation_skill_msgs/MaskDefinition _mask_pub
     (send _mask_pub :deserialize buf ptr-) (incf ptr- (send _mask_pub :serialization-length))
   ;;
   self)
  )

(setf (get image_segmentation_skill_msgs::ImageSegmentationSkillResult :md5sum-) "aaab811457c594f5592825b0e0a9f167")
(setf (get image_segmentation_skill_msgs::ImageSegmentationSkillResult :datatype-) "image_segmentation_skill_msgs/ImageSegmentationSkillResult")
(setf (get image_segmentation_skill_msgs::ImageSegmentationSkillResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

###################
# Result definition

#sensor_msgs/PointCloud2 cloud
int32 percentage
string skillStatus
string outcome
image_segmentation_skill_msgs/MaskDefinition mask_pub

================================================================================
MSG: image_segmentation_skill_msgs/MaskDefinition
int32 instance_nr
std_msgs/Float32MultiArray scores
sensor_msgs/Image mask_image
================================================================================
MSG: std_msgs/Float32MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float32[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = \"height\"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = \"width\"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = \"channel\"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension
================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

")



(provide :image_segmentation_skill_msgs/ImageSegmentationSkillResult "aaab811457c594f5592825b0e0a9f167")


