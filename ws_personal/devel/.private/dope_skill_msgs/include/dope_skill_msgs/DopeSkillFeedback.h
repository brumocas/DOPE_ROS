// Generated by gencpp from file dope_skill_msgs/DopeSkillFeedback.msg
// DO NOT EDIT!


#ifndef DOPE_SKILL_MSGS_MESSAGE_DOPESKILLFEEDBACK_H
#define DOPE_SKILL_MSGS_MESSAGE_DOPESKILLFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dope_skill_msgs
{
template <class ContainerAllocator>
struct DopeSkillFeedback_
{
  typedef DopeSkillFeedback_<ContainerAllocator> Type;

  DopeSkillFeedback_()
    : percentage(0)
    , skillStatus()  {
    }
  DopeSkillFeedback_(const ContainerAllocator& _alloc)
    : percentage(0)
    , skillStatus(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _percentage_type;
  _percentage_type percentage;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _skillStatus_type;
  _skillStatus_type skillStatus;





  typedef boost::shared_ptr< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct DopeSkillFeedback_

typedef ::dope_skill_msgs::DopeSkillFeedback_<std::allocator<void> > DopeSkillFeedback;

typedef boost::shared_ptr< ::dope_skill_msgs::DopeSkillFeedback > DopeSkillFeedbackPtr;
typedef boost::shared_ptr< ::dope_skill_msgs::DopeSkillFeedback const> DopeSkillFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator1> & lhs, const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.percentage == rhs.percentage &&
    lhs.skillStatus == rhs.skillStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator1> & lhs, const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dope_skill_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "679659a5e7bd72a0f86fdd2a666e4c40";
  }

  static const char* value(const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x679659a5e7bd72a0ULL;
  static const uint64_t static_value2 = 0xf86fdd2a666e4c40ULL;
};

template<class ContainerAllocator>
struct DataType< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dope_skill_msgs/DopeSkillFeedback";
  }

  static const char* value(const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"int32 percentage\n"
"string skillStatus\n"
"\n"
;
  }

  static const char* value(const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percentage);
      stream.next(m.skillStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DopeSkillFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dope_skill_msgs::DopeSkillFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percentage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.percentage);
    s << indent << "skillStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.skillStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOPE_SKILL_MSGS_MESSAGE_DOPESKILLFEEDBACK_H
